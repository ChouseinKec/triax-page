@mixin states(
	// Element states
	$hover: true,
	$focus: true,
	$active: true,
	$selected: true,
	$disabled: false,
	$open: false,
	$error: false,
	$placeholder: false
) {
	// Hover state is used for buttons and links
	// It indicates that the element is currently being hovered over
	@if $hover {
		&:hover {
			box-shadow: var(--theme-shadow--hover);
		}
	}

	// Focus state is used for inputs and buttons
	// It indicates that the element is currently focused
	@if $focus {
		&:focus {
			background: var(--theme-background-color--hover);
		}
	}

	// Active state is used for buttons
	// It indicates that the button is currently being pressed
	@if $active {
		&:active {
			background: var(--theme-background-color--hover);
		}
	}

	// Selected state is used for option elements
	// It indicates that the option is currently selected
	@if $selected {
		&[data-is-selected='true'] {
			background: var(--theme-background-color--selected);
		}
	}

	// Disabled state is used for buttons and inputs
	// It indicates that the element is currently disabled and cannot be interacted with
	@if $disabled {
		&[data-is-disabled='true'] {
			pointer-events: none;
			opacity: 0.5;

			&::after {
				content: none;
			}
		}
	}

	@if $error {
		&[data-is-error='true'] {
			border-bottom: 3px solid var(--color-error);
		}
	}
}

@mixin components--container($background: true, $radius: true, $shadow: true) {
	font-size: var(--font-size-sm);
	position: relative;
	padding: var(--size-xs);

	@if $background {
		background: var(--theme-background-color--secondary);
	}

	@if $radius {
		border-radius: var(--size-md);
	}

	@if $shadow {
		box-shadow: var(--theme-shadow--border);
	}
}

// This mixin is used for float components
// E.g DropdownReveal,DropdownSelect in Style Editor
@mixin components--float {
	border-radius: var(--size-sm);
	box-shadow: var(--theme-shadow--border);
	font-size: var(--font-size-md);
	background: var(--theme-background-color--secondary);
	position: fixed;
	padding: var(--size-md);
	z-index: 9999;

}

// This mixin is used for the view component
// E.g FlexView,PositionSelect, in Style Editor
@mixin components--view {
	@include components--container($background: false);

	width: 100%;
	height: 100%;
	max-height: 150px;
	overflow: hidden;
	background: var(--theme-background-color--secondary);
	color: var(--color-white);
}

// This mixin is used for input components
// E.g Search,Dimension,Number in Style Editor
@mixin components--input($padding: true) {
	height: 25px;

	@if $padding {
		padding: var(--size-sm) var(--size-md);
	}

	outline: none;
	border: none;
	border-radius: var(--size-sm);
	background: var(--theme-background-color--secondary);
	box-shadow: var(--theme-shadow--border);

	color: var(--color-white);
	font-size: var(--font-size-sm);
	text-align: center;

	&::-webkit-outer-spin-button,
	&::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}
	-moz-appearance: textfield;
	appearance: textfield;

	@include states($error: true, $placeholder: true);
}

// This mixin is used for vertical flex stack
// E.g Options
@mixin components--flex-vertical($gap: var(--size-sm), $align: baseline) {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: $align;
	gap: $gap;
}

// This mixin is used for vertical flex stack
// E.g Options
@mixin components--flex-horizontal($gap: var(--size-sm), $align: baseline, $justify: center) {
	display: flex;
	flex-direction: row;
	justify-content: $justify;
	align-items: $align;
	gap: $gap;
}

// This mixin is used for button-like components
// It can be used for buttons, options, and other interactive elements
// It includes styles for hover, focus, active, selected, and disabled states

@mixin components--button(
	//
	$height: 25px,
	$radius: var(--size-sm),
	$shadow: var(--theme-shadow--border),
	$background: var(--theme-background-color--secondary)
) {
	height: $height;

	padding: var(--size-sm);
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	gap: var(--size-xs);
	outline: none;
	border-radius: $radius;
	border: none;

	box-shadow: $shadow;

	background: $background;

	font-size: var(--font-size-sm);
	color: var(--color-white);
	text-transform: uppercase;
	text-overflow: ellipsis;
	white-space: nowrap;
	cursor: pointer;

	svg {
		max-width: 15px;
		max-height: 15px;

		[fill]:not([fill='none']) {
			fill: var(--color-white);
		}
	}

	@include states($selected: true, $disabled: true);
}

// This mixin is used for buttons that toggle a dropdown or a menu
// It includes an arrow icon that indicates the toggle state
@mixin components--button-toggle($isRound: false) {
	@if $isRound {
		font-size: var(--font-size-lg);
		padding: var(--size-xs);
		width: auto;
		height: 25px;
		aspect-ratio: 1;
		border-radius: 50%;
		&::before,
		&::after {
			content: none;
		}
	} @else {
		width: 100%;

		@include icon-arrow;
		@include components--button();

		> span {
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			width: 100%;
		}
	}

	svg {
		max-width: 15px;
		max-height: 15px;

		fill: var(--color-white);
	}
}

@mixin icon-arrow {
	&::after {
		content: '';
		width: 7px;
		height: 5px;
		display: block;

		transform: translateY(-5%);

		clip-path: polygon(50% 100%, 0 0, 100% 0);
		background: var(--color-white);

		transition: all 0.5s;
	}

	&[data-is-open='true'] {
		&::after {
			clip-path: polygon(50% 0, 0 100%, 100% 100%);
			background: var(--color-white);
		}
	}
}
